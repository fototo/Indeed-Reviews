load("~/Downloads/NYCDSA/Project/Shiny/shiny_jackyip.RData")
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(googleVis)
library(leaflet)
library(rgdal)
noise_leaflet
plot(top10byyr_line)
ggplot(top20, aes(x = reorder(type, count), y = count)) +
geom_bar(stat='identity') +
scale_y_continuous(labels=function(x) x/1000) +
xlab('Complaint Category') +
ylab('Count (in thousands)') +
ggtitle('Top 311 Service Request (2010-Present)') +
coord_flip()
colnames(coords_311_noise)
str(coords_311_noise)
colnames(coords_311_noise$GEOID10)
class(coords_311_noise)
shiny::runApp('Downloads/NYCDSA/Project/Shiny/shiny_jackyip')
runApp('Downloads/NYCDSA/Project/Shiny/shiny_jackyip')
load("~/Downloads/NYCDSA/Project/Shiny/shiny_jackyip/shiny.RData")
setwd("~/")
fread('noisebyhour.csv')
library(data.table)
fread('noisebyhour.csv')
noisebyhour <- fread('noisebyhour.csv')
save.image("~/Downloads/NYCDSA/Project/Shiny/shiny_jackyip/shiny.RData")
shiny::runApp('Downloads/NYCDSA/Project/Shiny/shiny_jackyip')
runApp('Downloads/NYCDSA/Project/Shiny/shiny_jackyip')
View(noisebyhour)
colnames(noisebyhour)
View(noisebyhour)
colnames(noisebyhour) <- noisebyhour[1,]
noisebyhour[1,]
colnames(noisebyhour) <- as.character(noisebyhour[1,])
View(noisebyhour)
noisebyhour[-1,]
View(noisebyhour)
noisebyhour <- noisebyhour[-1,]
View(noisebyhour)
save.image("~/Downloads/NYCDSA/Project/Shiny/shiny_jackyip/shiny.RData")
runApp('Downloads/NYCDSA/Project/Shiny/shiny_jackyip')
runApp('Downloads/NYCDSA/Project/Shiny/shiny_jackyip')
View(top10byyr)
runApp('Downloads/NYCDSA/Project/Shiny/shiny_jackyip')
runApp('Downloads/NYCDSA/Project/Shiny/shiny_jackyip')
View(leafletnoise)
View(leafletpark)
View(neighborhoods)
View(noisebyhour)
View(noisebyhour)
View(noiseparkbyyr)
View(noisetrafficbyyr)
View(top10byyr)
View(top20)
runApp('Downloads/NYCDSA/Project/Shiny/shiny_jackyip')
View(noisebyhour)
runApp('Downloads/NYCDSA/Project/Shiny/shiny_jackyip')
runApp('Downloads/NYCDSA/Project/Shiny/shiny_jackyip')
noisebyhour[, as.character(4)]
noisebyhour[, '4']
runApp('Downloads/NYCDSA/Project/Shiny/shiny_jackyip')
View(noisebyhour)
noisebyhour[, as.character(0)]
noisebyhour[, as.character(0)]
as.character(0)
noisebyhour[, '0']
noisebyhour[[as.character(input$integer)]]
noisebyhour[[as.character(7)]]
runApp('Downloads/NYCDSA/Project/Shiny/shiny_jackyip')
save.image("~/Downloads/NYCDSA/Project/Shiny/shiny_jackyip/shiny.RData")
runApp('Downloads/NYCDSA/Project/Shiny/shiny_jackyip')
runApp('Downloads/NYCDSA/Project/Shiny/shiny_jackyip')
runApp('Downloads/NYCDSA/Project/Shiny/shiny_jackyip')
runApp('Downloads/NYCDSA/Project/Shiny/shiny_jackyip')
runApp('Downloads/NYCDSA/Project/Shiny/shiny_jackyip')
runApp('Downloads/NYCDSA/Project/Shiny/shiny_jackyip')
runApp('Downloads/NYCDSA/Project/Shiny/shiny_jackyip')
runApp('Downloads/NYCDSA/Project/Shiny/shiny_jackyip')
runApp('Downloads/NYCDSA/Project/Shiny/shiny_jackyip')
runApp('Downloads/NYCDSA/Project/Shiny/shiny_jackyip')
runApp('Downloads/NYCDSA/Project/Shiny/shiny_jackyip')
runApp('Downloads/NYCDSA/Project/Shiny/shiny_jackyip')
save.image("~/Downloads/NYCDSA/Project/Shiny/shiny_jackyip/shiny.RData")
shiny::runApp('Downloads/NYCDSA/Project/Shiny/shiny_jackyip')
load("~/Downloads/NYCDSA/Project/Shiny/shiny_jackyip/shiny.RData")
shiny::runApp('Downloads/NYCDSA/Project/Shiny/shiny_jackyip')
library(caret)
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10)))
missing.data
pre.1nn = preProcess(missing.data, method = 'knnImpute', k=1)
imputed.1nn = predict(pre.1nn, missing.data)
install.packages('RANN')
imputed.1nn = predict(pre.1nn, missing.data)
pre.5nn = preProcess(missing.data, method = 'knnImpute', k=5)
imputed.5nn = predict(pre.5nn, missing.data)
pre.9nn = preProcess(missing.data, method = 'knnImpute', k=9)
imputed.9nn = predict(pre.9nn, missing.data)
imputed.1nn #Inspecting the imputed values of each of the methods;
imputed.5nn #what is going on here? Given our dataset, should we
imputed.9nn #expect these results?
sqrt(nrow(sleep)) #Determining K for the sleep dataset.
pre.8nn = preProcess(sleep, method = 'knnImpute', k=8)
sleep.imputed8NN = predict(pre.8nn, sleep)
summary(sleep) #Summary information for the original sleep dataset.
summary(sleep.imputed8NN[, 1:10]) #Summary information for the imputed sleep dataset.
summary(sleep.imputed8NN[, 1:10]) #Summary information for the imputed sleep dataset.
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10)))
missing.data
pre.1nn = preProcess(missing.data, method = 'knnImpute', k=1)
imputed.1nn = predict(pre.1nn, missing.data)
pre.5nn = preProcess(missing.data, method = 'knnImpute', k=5)
imputed.5nn = predict(pre.5nn, missing.data)
pre.9nn = preProcess(missing.data, method = 'knnImpute', k=9)
imputed.9nn = predict(pre.9nn, missing.data)
imputed.1nn #Inspecting the imputed values of each of the methods;
imputed.5nn #what is going on here? Given our dataset, should we
imputed.9nn #expect these results?
sqrt(nrow(sleep)) #Determining K for the sleep dataset.
pre.8nn = preProcess(sleep, method = 'knnImpute', k=8)
sleep.imputed8NN = predict(pre.8nn, sleep)
summary(sleep) #Summary information for the original sleep dataset.
summary(sleep.imputed8NN[, 1:10]) #Summary information for the imputed sleep dataset.
summary(sleep.imputed8NN[, 1:10]) #Summary information for the imputed sleep dataset.
pre.8nn = preProcess(sleep, method = 'knnImpute', k=8)
sleep.imputed8NN = predict(pre.8nn, sleep)
summary(sleep) #Summary information for the original sleep dataset.
summary(sleep.imputed8NN[, 1:10]) #Summary information for the imputed sleep dataset.
sqrt(nrow(sleep)) #Determining K for the sleep dataset.
library(VIM) #For the visualization and imputation of missing values.
help(sleep) #Inspecting the mammal sleep dataset.
sleep
summary(sleep) #Summary information for the sleep dataset.
sapply(sleep, sd) #Standard deviations for the sleep dataset; any issues?
sapply(sleep, function(x) sd(x, na.rm=T))
aggr(sleep) #A graphical interpretation of the missing values and their
library(mice) #Load the multivariate imputation by chained equations library.
md.pattern(sleep) #Can also view this information from a data perspective.
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10)))
missing.data
mean(missing.data$x2, na.rm = TRUE) #Mean of x2 prior to imputation.
sd(missing.data$x2, na.rm = TRUE) #Standard deviation of x2 prior to imputation.
cor(missing.data, use = "complete.obs") #Correlation prior to imputation.
missing.data$x2[is.na(missing.data$x2)] = mean(missing.data$x2, na.rm=TRUE)
missing.data
sd(missing.data$x2, na.rm = TRUE) # imputation can change the distribution of the observations
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10))) #Recreating dataset.
missing.data = transform(missing.data, x2 = ifelse(is.na(x2),
mean(x2, na.rm=TRUE),
x2))
missing.data
install.packages('caret')
library(caret)
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10))) #Recreating dataset.
pre = preProcess(missing.data, method = "medianImpute") # caret does not give mean impute, only median
missing.data = predict(pre, missing.data)
missing.data
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10))) #Recreating dataset.
pre = preProcess(missing.data, method = c("scale", "medianImpute"))
missing.data = predict(pre, missing.data)
missing.data
names(pre) ## python uses eir()
library(Hmisc) #Load the Harrell miscellaneous library.
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10))) #Recreating dataset.
imputed.x2 = impute(missing.data$x2, mean) #Specifically calling the x2 variable.
imputed.x2
summary(imputed.x2) #Summary information for the imputed variable.
is.imputed(imputed.x2) #Boolean vector indicating imputed values.
missing.data$x2 = imputed.x2 #Replacing the old vector.
mean(missing.data$x2) #Mean of x2 after imputation.
sd(missing.data$x2) #Standard deviation of x2 after imputation.
cor(missing.data, use = "complete.obs") #Correlation afterto imputation.
plot(missing.data) #What are some potential problems with mean value imputation?
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10)))
missing.data
mean(missing.data$x2, na.rm = TRUE) #Mean of x2 prior to imputation.
sd(missing.data$x2, na.rm = TRUE) #Standard deviation of x2 prior to imputation.
cor(missing.data, use = "complete.obs") #Correlation prior to imputation.
set.seed(0)
imputed.x2 = impute(missing.data$x2, "random") #Simple random imputation using the
imputed.x2
summary(imputed.x2) #Summary information for the imputed variable.
is.imputed(imputed.x2) #Boolean vector indicating imputed values.
missing.data$x2 = imputed.x2 #Replacing the old vector.
mean(missing.data$x2) #Mean of x2 after imputation.
sd(missing.data$x2) #Standard deviation of x2 after imputation.
cor(missing.data, use = "complete.obs") #Correlation afterto imputation.
plot(missing.data) #What are some potential problems with mean value imputation?
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10)))
missing.data
pre.1nn = preProcess(missing.data, method = 'knnImpute', k=1)
imputed.1nn = predict(pre.1nn, missing.data)
pre.5nn = preProcess(missing.data, method = 'knnImpute', k=5)
imputed.5nn = predict(pre.5nn, missing.data)
pre.9nn = preProcess(missing.data, method = 'knnImpute', k=9)
imputed.9nn = predict(pre.9nn, missing.data)
imputed.1nn #Inspecting the imputed values of each of the methods;
imputed.5nn #what is going on here? Given our dataset, should we
imputed.9nn #expect these results?
sqrt(nrow(sleep)) #Determining K for the sleep dataset.
pre.8nn = preProcess(sleep, method = 'knnImpute', k=8)
sleep.imputed8NN = predict(pre.8nn, sleep)
summary(sleep) #Summary information for the original sleep dataset.
summary(sleep.imputed8NN[, 1:10]) #Summary information for the imputed sleep dataset.
install.packages('PASWR')
library('PASWR')
titanic <- load(titanic3)
titanic <- data(titanic3)
data(titanic3)
rm(titanic)
View(titanic3)
summary(titanic3)
library(mice)
md.pattern(titanic)
md.pattern(titanic3)
md.pattern(titanic3)
len(titanic3)
length(titanic3)
nrow(titanic3)
1/1309
263/1309
1188/1309
complete.cases(titanic3)
length(complete.cases(titanic3))
sum(complete.cases(titanic3))
1309 - sum(complete.cases(titanic3))
1190/1309
sum(is.na(titanic))
sum(is.na(titanic3))
sum(titanic3)
sum(!is.na(titanic3))
16874+1452
1452/(16874+1452)
md.pattern(titanic3)
plot(titanic3$age)
hist(titanic3$age)
titanic3age <- titanic3
titanic3age$age[is.na(titanic3age$age)] = mean(titanic3age$age, na.rm = TRUE)
titanic3age
hist(titanic3age$age)
hist(titanic3$age)
hist(titanic3age$age)
library(Hmisc)
imputed.titanic <- impute(titanic3$age, mean)
titanic3random <- titanic3
titanic3random$age <- imputed.titanic
plot(titanic3random)
plot(titanic3random$age)
hist(titanic3random$age)
hist(titanic3$age)
hist(titanic3random$age)
hist(titanic3random$age)
hist(titanic3age$age)
hist(titanic3random$age)
titanic3random <- titanic3
imputed.titanic <- impute(titanic3$age, mean)
titanic3random$age <- imputed.titanic
hist(titanic3random$age)
titanic3random <- titanic3
imputed.titanic <- impute(titanic3$age, 'random')
titanic3random$age <- imputed.titanic
hist(titanic3random$age)
hist(titanic3$age)
hist(titanic3random$age)
imputed.fare = impute(titanic3$fare, "random")
titanic3fare <- titanic3
titanic3fare$fare <- imputed.fare
View(imputed.fare)
View(titanic3)
titanic3[fare == NA]
titanic3[titanic3$fare == NA]
titanic3[titanic3$fare == 'NA']
titanic3[titanic3$fare]
titanic3['titanic3$fare']
titanic3['fare']
titanic3['fare' == NA]
titanic3[is.na('fare')]
titanic3$fare[is.na()]
titanic3$fare['fare' == NA]
match('NA', titanic3$fare)
titanic3fare
titanic3fare$fare
titanic3
titanic3$fare
match('NA', titanic3$fare)
match(NA, titanic3$fare)
titanic3fare$fare[1226]
titanic3fare$fare[1227] # 25.4667 for imputed
titanic3fare$fare[1226] # 25.4667 for imputed
library(ggplot2)
imputed.fare = impute(titanic3$fare, "random")
titanic3$fare <- imputed.fare
View(imputed.fare)
titanic3fare$fare[1226] # 25.4667 for imputed
match(NA, titanic3$fare) # returns index 1226
match(NA, titanic3$fare) # returns index 1226
titanic3$fare[1226] # 25.4667 for imputed
titanic3$fare[1226] # 25.4667 for imputed
imputed.fare = impute(titanic3$fare, "random")
titanic3fare <- titanic3
titanic3fare$fare <- imputed.fare
View(imputed.fare)
match(NA, titanic3$fare) # returns index 1226
match(NA, titanic3fare$fare) # returns index 1226
match(NA, titanic3fare$fare) # returns index 1226
imputed.fare = impute(titanic3$fare, "random")
titanic3fare <- titanic3
titanic3fare$fare <- imputed.fare
match(NA, titanic3fare$fare) # returns index 1226
titanic3fare$fare[1226] # 25.4667 for imputed
data(titanic3)
imputed.fare = impute(titanic3$fare, "random")
titanic3fare <- titanic3
titanic3fare$fare <- imputed.fare
match(NA, titanic3fare$fare) # returns index 1226
titanic3fare$fare[1226] # 25.4667 for imputed
data(titanic3)
match(NA, titanic3$fare) # returns index 1226
imputed.fare = impute(titanic3$fare, "random")
titanic3fare <- titanic3
titanic3fare$fare <- imputed.fare
match(NA, titanic3$fare) # returns index 1226
titanic3fare$fare[1226] # 25.4667 for imputed
titanic3fare$fare[1226] # 25.4667 for imputed
titanic3fare$fare <- imputed.fare
newtable <- cbind(titanic3fare$fare, titanic3random$age)
View(newtable)
titanic3$age <- imputed.titanic
hist(titanic3$age)
imputed.titanic <- impute(titanic3$age, 'random')
titanic3$age <- imputed.titanic
hist(titanic3$age)
imputed.fare = impute(titanic3$fare, "random")
titanic3$fare <- imputed.fare
match(NA, titanic3$fare) # returns index 1226
titanic3fare$fare[1226] # 6.8583 for imputed
titanic3fare$fare[1226] # 6.8583 for imputed
titanic3$fare[1226] # 6.8583 for imputed
ggplot(titanic3, aes(x=fare, y=age))
ggplot(titanic3, aes(x=fare, y=age , color = pclass))
ggplot(titanic3, aes(x=titanic3$fare, y=titanic3$age , color = titanic3$pclass))
+ geom_point(shape=1)
ggplot(titanic3, aes(x=titanic3$fare, y=titanic3$age , color = titanic3$pclass)) +
geom_point(shape=1)
colnames(titanic3)
titanic3[nrow(titanic3) + 1, ] <- c('', '', '', '', 50, '', '', '', 400, '', '', '', '', '')
View(titanic3)
titanic3[nrow(titanic3) + 1, ] <- c('', '', '', '', 10, '', '', '', 100, '', '', '', '', '')
library(caret)
hist(titanic3age$age)
hist(titanic3$age)
hist(titanic3$age)
hist(titanic3$age)
hist(titanic3age$age)
pre.1nn = preProcess(titanic3, method = 'knnImpute', k=1)
imputed.1nn = predict(pre.1nn, missing.data)
pre.1nn = preProcess(titanic3, method = 'knnImpute', k=1)
titanic3[nrow(titanic3) + 1, ] <- c('', '', '', '', 10, '', '', '', 100, '', '', '', '', '')
rm(titanic3[1312,])
titanic3[1312,]
rm(titanic3[1312,])
titanic3[1312,] = ''
titanic3[-1312,]
titanic <-titanic3[-1312,]
titanic3 <-titanic3[-1312,]
rm(titanic)
pre.1nn = preProcess(titanic3, method = 'knnImpute', k=1)
pre.1nn = preProcess(missing.data, method = 'knnImpute', k=1)
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10)))
missing.data
pre.1nn = preProcess(missing.data, method = 'knnImpute', k=1)
imputed.1nn = predict(pre.1nn, missing.data)
imputed.1nn #Inspecting the imputed values of each of the methods;
pre.1nn = preProcess(titanic3, method = 'knnImpute', k=1)
pre.1nn = preProcess(titanic3$pclass, method = 'knnImpute', k=1)
pre.1nn = preProcess(titanic3, method = 'knnImpute', k=1)
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10)))
missing.data
pre.1nn = preProcess(missing.data, method = 'knnImpute', k=1)
class(missing.data)
class(titanic3)
pre.1nn = preProcess(titanic3, method = 'knnImpute', k=1)
newtitanic <- titanic3[,c(1, 5, 9)]
View(newtitanic)
pre.1nn = preProcess(newtitanic, method = 'knnImpute', k=1)
summary(newtitanic)
as.numeric(newtitanic$age)
newtitanic$age <- as.numeric(newtitanic$age)
newtitanic$fare <- as.numeric(newtitanic$fare)
pre.1nn = preProcess(newtitanic, method = 'knnImpute', k=1)
imputed.1nn = predict(pre.1nn, missing.data)
imputed.1nn = predict(pre.1nn, newtitanic)
View(imputed.1nn)
View(pre.1nn)
pre.1nn
as.data.frame(pre.1nn)
pre.1nn$data
newtitanic <- titanic3[,c(1, 5, 9)]
pre.1nn = preProcess(newtitanic, method = 'knnImpute', k=1)
newtitanic$age <- as.numeric(newtitanic$age)
newtitanic$fare <- as.numeric(newtitanic$fare)
pre.1nn = preProcess(newtitanic, method = 'knnImpute', k=1)
imputed.1nn = predict(pre.1nn, newtitanic)
imputed.1nn
View(imputed.1nn)
predict(pre.1nn, newtitanic)
imputed.1nn = tail(predict(pre.1nn, newtitanic))
tail(predict(pre.1nn, newtitanic))
is.na(newtitanic)
tail(is.na(newtitanic))
tail(newtitanic)
sapply(newtitanic)
sapply(newtitanic, class)
summary(newtitanic)
pre.1nn = preProcess(newtitanic, method = 'knnImpute', k=1)
predict(pre.1nn, newtitanic)
levels(newtitanic$pclass)
pre.1nn = preProcess(newtitanic, method = 'knnImpute', k=3)
imputed.1nn = predict(pre.1nn, newtitanic)
View(imputed.1nn)
iris
iris[1,'Species']
iris[1,'Species'] = NA
iris[1,]
pre.1nn = preProcess(iris, method = 'knnImpute', k=1)
predict(pre.1nn, iris)
data("iris")
iris[1,'Sepal.Length'] = NA
pre.1nn = preProcess(iris, method = 'knnImpute', k=1)
predict(pre.1nn, iris)
library(Hmisc) #Load the Harrell miscellaneous library.
imputed.x2 = impute(newtitanic$pclass, mean) #Specifically calling the x2 variable.
imputed.x2
View(imputed.x2)
newtitanic$pclass <- as.character(newtitanic$pclass)
pre.1nn = preProcess(newtitanic, method = 'knnImpute', k=3)
imputed.1nn = predict(pre.1nn, newtitanic)
View(imputed.1nn)
setwd("~/Downloads/NYCDSA/Project/WebScraping/Indeed/indeed")
library(data.table)
x <- fread('reviews.csv')
View(x)
